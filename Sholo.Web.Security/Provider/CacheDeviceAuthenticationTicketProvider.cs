using System;
using System.Collections;
using System.Collections.Generic;
using System.Web;
using System.Web.Caching;
using Sholo.Web.Security.Ticket;

namespace Sholo.Web.Security.Provider
{
    public class CacheDeviceAuthenticationTicketProvider : DeviceAuthenticationTicketProvider
    {
        /// <summary>
        /// This prefix is prepended to ticket key as the key to the cache.
        /// </summary>
        private const string DeviceTicketKeyPrefix = "DEVICE::";

        /// <summary>
        /// Initializes the CacheUserAuthenticationTicketProvider module.
        /// </summary>
        public override void Initialize()
        {
            // Do nothing
        }

        /// <summary>
        /// Removes expired entries from the ticket store
        /// </summary>
        public override void RemoveExpiredTickets()
        {
            // No-op.  ASP.NET Cache provider removes expired entries automatically.
        }

        /// <summary>
        /// Retrieve a DeviceAuthenticationTicket from the ticket store by it's ticket key
        /// </summary>
        /// <param name="ticketKey">The ticket key generated by the server</param>
        /// <returns>The DeviceAuthenticationTicket or null if no matching ticket is found</returns>
        /// <exception cref="ArgumentNullException">ticketKey is null</exception>
        /// <exception cref="ArgumentException">ticketKey is empty</exception>
        public override DeviceAuthenticationTicket GetTicket(string ticketKey)
        {
            if (ticketKey == null)
            {
                throw new ArgumentNullException("ticketKey", "ticketKey parameter cannot be null or empty.");
            }
            if (string.IsNullOrEmpty(ticketKey))
            {
                throw new ArgumentException("ticketKey parameter cannot be null or empty.", "ticketKey");
            }

            string key = GetCacheKey(ticketKey);
            if (HttpContext.Current.Cache[key] != null)
            {
                DeviceAuthenticationTicket result = HttpContext.Current.Cache[key] as DeviceAuthenticationTicket;
                return result;
            }
            return null;
        }

        /// <summary>
        /// Inserts a DeviceAuthenticationTicket to the ticket store with a corresponding 
        /// ticket expiration date.
        /// </summary>
        /// <param name="ticket">The DeviceAuthenticationTicket to insert</param>
        /// <param name="expiration">The date and time at which the ticket expires</param>
        /// <exception cref="ArgumentNullException">DeviceAuthenticationTicket is null</exception>
        public override void InsertTicket(DeviceAuthenticationTicket ticket, DateTime expiration)
        {
            if (ticket == null)
            {
                throw new ArgumentNullException("ticket", "DeviceAuthenticationTicket parameter cannot be null.");
            }

            // Don't enforce sliding expiration on the cache entry.  Sliding expiration 
            // is handled by the HttpModule
            HttpContext.Current.Cache.Insert(GetCacheKey(ticket.Key), ticket, null, expiration, Cache.NoSlidingExpiration);
        }

        /// <summary>
        /// Updates the expiration date and time for an existing ticket.  If the ticket does
        /// not exist in the ticket store, just return (do not throw an exception).
        /// </summary>
        /// <param name="ticket">The DeviceAuthenticationTicket to insert</param>
        /// <param name="newExpiration">The new expiration date and time</param>
        /// <exception cref="ArgumentNullException">DeviceAuthenticationTicket is null</exception>
        public override void UpdateTicketExpiration(DeviceAuthenticationTicket ticket, DateTime newExpiration)
        {
            if (ticket == null)
            {
                throw new ArgumentNullException("ticket", "DeviceAuthenticationTicket parameter cannot be null.");
            }

            RevokeTicket(ticket.Key);
            InsertTicket(ticket, newExpiration);
        }

        /// <summary>
        /// Removes the ticket from the collection if it exists.  If the ticket does not
        /// exist in the ticket store, just return (do not throw an exception).
        /// </summary>
        /// <param name="ticketKey">The ticket to remove from the ticket store</param>
        /// <exception cref="ArgumentNullException">icketKey is null</exception>
        /// <exception cref="ArgumentException">ticketKey is empty</exception>
        public override void RevokeTicket(string ticketKey)
        {
            if (ticketKey == null)
            {
                throw new ArgumentNullException("ticketKey", "ticketKey parameter cannot be null or empty.");
            }
            if (string.IsNullOrEmpty(ticketKey))
            {
                throw new ArgumentException("ticketKey parameter cannot be null or empty.", "ticketKey");
            }

            string key = GetCacheKey(ticketKey);
            if (HttpContext.Current.Cache[key] != null)
            {
                UserAuthenticationTicket ticket = HttpContext.Current.Cache[key] as UserAuthenticationTicket;
                if (ticket != null)
                {
                    if (HttpContext.Current.Cache[key] != null)
                    {
                        HttpContext.Current.Cache.Remove(key);
                    }
                }
            }
        }

        /// <summary>
        /// Indicates whether or not the ticket store contains the supplied userAuthenticationTicketKey
        /// </summary>
        /// <param name="ticketKey">The ticket to check for</param>
        /// <returns>True if the ticket is contained in the store</returns>
        /// <exception cref="ArgumentNullException">ticketKey is null</exception>
        /// <exception cref="ArgumentException">ticketKey is empty</exception>
        public override bool ContainsTicket(string ticketKey)
        {
            if (ticketKey == null)
            {
                throw new ArgumentNullException("ticketKey", "ticketKey parameter cannot be null or empty.");
            }
            if (string.IsNullOrEmpty(ticketKey))
            {
                throw new ArgumentException("ticketKey parameter cannot be null or empty.", "ticketKey");
            }

            IDictionaryEnumerator enumerator = HttpContext.Current.Cache.GetEnumerator();
            while (enumerator.MoveNext())
            {
                string currentKey = enumerator.Entry.Key as string;
                if (currentKey != null && currentKey.StartsWith(DeviceTicketKeyPrefix))
                {
                    UserAuthenticationTicket currentAuthTicket = enumerator.Entry.Value as UserAuthenticationTicket;
                    if (currentAuthTicket != null)
                    {
                        if (currentAuthTicket.Key == ticketKey)
                        {
                            return true;
                        }
                    }
                }
            }
            return false;
        }

        /// <summary>
        /// Retrieves all tickets in the ticket store that have not already expired.
        /// </summary>
        /// <returns>An enumerable collection of DeviceAuthenticationTickets</returns>
        public override IEnumerable<DeviceAuthenticationTicket> GetAllTickets()
        {
            IDictionaryEnumerator enumerator = HttpContext.Current.Cache.GetEnumerator();
            while (enumerator.MoveNext())
            {
                string currentKey = enumerator.Entry.Key as string;
                if (currentKey != null && currentKey.StartsWith(DeviceTicketKeyPrefix))
                {
                    DeviceAuthenticationTicket currentTicket = enumerator.Entry.Value as DeviceAuthenticationTicket;
                    if (currentTicket != null)
                    {
                        yield return currentTicket;
                    }
                }
            }
        }

        /// <summary>
        /// Retrieves all DeviceAuthenticationTicket keys in the ticket store that have not already
        /// expired.
        /// </summary>
        /// <returns>An enumerable collection of tickets</returns>
        public override IEnumerable<string> GetAllTicketKeys()
        {
            IDictionaryEnumerator enumerator = HttpContext.Current.Cache.GetEnumerator();
            while (enumerator.MoveNext())
            {
                string currentKey = enumerator.Entry.Key as string;
                if (currentKey != null && currentKey.StartsWith(DeviceTicketKeyPrefix))
                {
                    DeviceAuthenticationTicket currentAuthTicket = enumerator.Entry.Value as DeviceAuthenticationTicket;
                    if (currentAuthTicket != null)
                    {
                        yield return currentAuthTicket.Key;
                    }
                }
            }
        }

        /// <summary>
        /// Verify that the supplied DeviceAuthenticationTicket exists in the ticket store
        /// </summary>
        /// <param name="ticket">The DeviceAuthenticationTicket to verify</param>
        /// <returns>
        /// True if the ticket exists in the ticket store and the properties of that 
        /// ticket match the properties of the ticket in the ticket store.
        /// </returns>
        public override bool VerifyTicket(DeviceAuthenticationTicket ticket)
        {
            if (ticket == null)
            {
                throw new ArgumentNullException("ticket", "DeviceAuthenticationTicket parameter cannot be null.");
            }

            string incomingTicket = ticket.Key;
            DeviceAuthenticationTicket cacheAuthTicket = GetTicket(incomingTicket);
            if (cacheAuthTicket != null)
            {
                string cacheTicket = cacheAuthTicket.Key;
                if (cacheTicket == incomingTicket)
                {
                    // TODO: See how to handle this.  For now, just return true
                    // if (string.Compare(cacheAuthTicket.HostAddress, ticket.HostAddress, StringComparison.OrdinalIgnoreCase) != 0)
                    // {
                    //    return false;
                    // }

                    return true;
                }
            }
            else
            {
                return false;
            }
            return false;
        }

        /// <summary>
        /// Converts a ticketKey to a corresponding key in the ticket store (cache provider). 
        /// </summary>
        /// <param name="ticketKey">The ticketKey to convert.</param>
        /// <returns>The cache key associated with the ticketKey</returns>
        /// <exception cref="ArgumentNullException">ticketKey is null</exception>
        /// <exception cref="ArgumentException">ticketKey is empty</exception>
        private static string GetCacheKey(string ticketKey)
        {
            if (ticketKey == null)
            {
                throw new ArgumentNullException("ticketKey", "ticketKey parameter cannot be null or empty.");
            }
            if (string.IsNullOrEmpty(ticketKey))
            {
                throw new ArgumentException("ticketKey parameter cannot be null or empty.", "ticketKey");
            }

            return DeviceTicketKeyPrefix + ticketKey;
        }
    }
}
